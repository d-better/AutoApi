<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.better.apitest.mapper.TestCaseMapper">
  <resultMap id="BaseResultMap" type="com.better.apitest.domain.TestCase">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="test_case_name" jdbcType="VARCHAR" property="testCaseName" />
    <result column="remarks" jdbcType="VARCHAR" property="remarks" />
    <result column="priority" jdbcType="INTEGER" property="priority" />
    <result column="project_id" jdbcType="BIGINT" property="projectId" />
    <result column="environment_id" jdbcType="BIGINT" property="environmentId" />
    <result column="create_by" jdbcType="BIGINT" property="createBy" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="update_by" jdbcType="BIGINT" property="updateBy" />
    <result column="update_date" jdbcType="TIMESTAMP" property="updateDate" />
    <result column="del_flag" jdbcType="BIT" property="delFlag" />
  </resultMap>
  <sql id="Base_Column_List">
    id, test_case_name, remarks, priority, project_id, environment_id, create_by, create_date, 
    update_by, update_date, del_flag
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sys_test_case
    where id = #{id,jdbcType=BIGINT}
  </select>

  <select id="selectByProjectId" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from sys_test_case
    where project_id = #{projectId,jdbcType=BIGINT}
    and del_flag = 0
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from sys_test_case
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.better.apitest.domain.TestCase">
    insert into sys_test_case (id, test_case_name, remarks, 
      priority, project_id, environment_id, 
      create_by, create_date, update_by, 
      update_date, del_flag)
    values (#{id,jdbcType=BIGINT}, #{testCaseName,jdbcType=VARCHAR}, #{remarks,jdbcType=VARCHAR}, 
      #{priority,jdbcType=INTEGER}, #{projectId,jdbcType=BIGINT}, #{environmentId,jdbcType=BIGINT}, 
      #{createBy,jdbcType=BIGINT}, #{createDate,jdbcType=TIMESTAMP}, #{updateBy,jdbcType=BIGINT}, 
      #{updateDate,jdbcType=TIMESTAMP}, #{delFlag,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" useGeneratedKeys="true" keyProperty="id" parameterType="com.better.apitest.domain.TestCase">
    insert into sys_test_case
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="testCaseName != null">
        test_case_name,
      </if>
      <if test="remarks != null">
        remarks,
      </if>
      <if test="priority != null">
        priority,
      </if>
      <if test="projectId != null">
        project_id,
      </if>
      <if test="environmentId != null">
        environment_id,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="updateBy != null">
        update_by,
      </if>
      <if test="updateDate != null">
        update_date,
      </if>
      <if test="delFlag != null">
        del_flag,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="testCaseName != null">
        #{testCaseName,jdbcType=VARCHAR},
      </if>
      <if test="remarks != null">
        #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="priority != null">
        #{priority,jdbcType=INTEGER},
      </if>
      <if test="projectId != null">
        #{projectId,jdbcType=BIGINT},
      </if>
      <if test="environmentId != null">
        #{environmentId,jdbcType=BIGINT},
      </if>
      <if test="createBy != null">
        #{createBy,jdbcType=BIGINT},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        #{updateBy,jdbcType=BIGINT},
      </if>
      <if test="updateDate != null">
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="delFlag != null">
        #{delFlag,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.better.apitest.domain.TestCase">
    update sys_test_case
    <set>
      <if test="testCaseName != null">
        test_case_name = #{testCaseName,jdbcType=VARCHAR},
      </if>
      <if test="remarks != null">
        remarks = #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="priority != null">
        priority = #{priority,jdbcType=INTEGER},
      </if>
      <if test="projectId != null">
        project_id = #{projectId,jdbcType=BIGINT},
      </if>
      <if test="environmentId != null">
        environment_id = #{environmentId,jdbcType=BIGINT},
      </if>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=BIGINT},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        update_by = #{updateBy,jdbcType=BIGINT},
      </if>
      <if test="updateDate != null">
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="delFlag != null">
        del_flag = #{delFlag,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.better.apitest.domain.TestCase">
    update sys_test_case
    set test_case_name = #{testCaseName,jdbcType=VARCHAR},
      remarks = #{remarks,jdbcType=VARCHAR},
      priority = #{priority,jdbcType=INTEGER},
      project_id = #{projectId,jdbcType=BIGINT},
      environment_id = #{environmentId,jdbcType=BIGINT},
      create_by = #{createBy,jdbcType=BIGINT},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=BIGINT},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      del_flag = #{delFlag,jdbcType=BIT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>